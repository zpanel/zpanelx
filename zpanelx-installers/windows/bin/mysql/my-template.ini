## MySQL Server Instance Configuration File Template
## ----------------------------------------------------------------------
## Version 1.0.2
##
## Lines that starts like this are comments and wont be put in the output.
## Normal comments are output.
##
## Replaceable things must be like:
## 
## <<{:=1+1}>>
##
## You can put more than one optional expression one after another.
## The option to be picked is the one that contains the correct
## config option tag before the : You can specify multiple optional 
## tags by separating them with a |  Example:
##
## <<{:=1+1}{:BLA|BLE=1+[one]}>>
##
## An empty tag is the default value.
##
## All expressions are evaluated as doubles, but rounded to integers.
## 
## If you don't put a = after the :, the remaining expression will be
## interpreted as a string and variables will be simply replaced.
##
## If an expression is enclosed with <<< >>> (instead of << >>), the
## line will not be written to the output file. You can use that for
## temporary variables.
##
## You can put the following flags between : and = for arithmetical
## expressions:
##  R - round to nearest multiple of 1000
##  K - round to nearest multiple of 1K or 1M or 1G
##  M - take max value, from list separated by commas
##  m - same for min
##  N - allow negative result.
##
## pick appropriate values for these
_memory=<<<{SERVER:K=[MEMORY]/2}{DEDICATED:K=[MEMORY]*90/100}{:MK=[MEMORY]/12,48M}>>>
_myisam_pct=<<<{MYISAM:=100}{INNODB:=5}{USERDEF_DB:=[myisam_pct]}{:=50}>>>
_active_connections=<<<{DSS:=20}{OLTP:=500}{:=[active_connections]}>>>
_over_commit_factor=<<<{:=10}>>>
_over_commit_factor2=<<<{:=10}>>>
##
##
##
# MySQL Server Instance Configuration File
# ----------------------------------------------------------------------
# Generated by the MySQL Server Instance Configuration Wizard
#
#
# Installation Instructions
# ----------------------------------------------------------------------
#
# On Linux you can copy this file to /etc/my.cnf to set global options,
# mysql-data-dir/my.cnf to set server-specific options
# (@localstatedir@ for this installation) or to
# ~/.my.cnf to set user-specific options.
#
# On Windows you should keep this file in the installation directory 
# of your server (e.g. C:\Program Files\MySQL\MySQL Server X.Y). To
# make sure the server reads the config file use the startup option 
# "--defaults-file". 
#
# To run run the server from the command line, execute this in a 
# command line shell, e.g.
# mysqld --defaults-file="C:\Program Files\MySQL\MySQL Server X.Y\my.ini"
#
# To install the server as a Windows service manually, execute this in a 
# command line shell, e.g.
# mysqld --install MySQLXY --defaults-file="C:\Program Files\MySQL\MySQL Server X.Y\my.ini"
#
# And then execute this in a command line shell to start the server, e.g.
# net start MySQLXY
#
#
# Guildlines for editing this file
# ----------------------------------------------------------------------
#
# In this file, you can use all long options that the program supports.
# If you want to know the options a program supports, start the program
# with the "--help" option.
#
# More detailed information about the individual options can also be
# found in the manual.
#
#
# CLIENT SECTION
# ----------------------------------------------------------------------
#
# The following options will be read by MySQL client applications.
# Note that only client applications shipped by MySQL are guaranteed
# to read this section. If you want your own MySQL client program to
# honor these values, you need to specify it as an option during the
# MySQL client library initialization.
#
[client]

<<ifdef SKIPNETWORKING>>
pipe
socket=mysql
<<else>>
port=<<{:=[port]}>>
<<endif>>

[mysql]

default-character-set=<<{:[default-character-set]}>>


# SERVER SECTION
# ----------------------------------------------------------------------
#
# The following options will be read by the MySQL Server. Make sure that
# you have installed the server correctly (see above) so it reads this 
# file.
#
[mysqld]

<<ifdef SKIPNETWORKING>>
skip-networking
enable-named-pipe

# The Pipe the MySQL Server will use
socket=mysql
<<else>>
# The TCP/IP Port the MySQL Server will listen on
port=<<{:=[port]}>>
<<endif>>


#Path to installation directory. All paths are usually resolved relative to this.
basedir=<<{:[basedir]}>>

#Path to the database root
datadir=<<{:[datadir]}>>

# The default character set that will be used when a new schema or table is
# created and no character set is defined
character-set-server=<<{:[default-character-set]}>>

# The default storage engine that will be used when create new tables when
default-storage-engine=<<{MIXED|INNODB:INNODB}{:MYISAM}>>

<<ifdef STRICTMODE>>
# Set the SQL mode to strict
sql-mode="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"
<<endif>>

# The maximum amount of concurrent sessions the MySQL server will
# allow. One of these connections will be reserved for a user with
# SUPER privileges to allow the administrator to login even if the
# connection limit has been reached.
_max_connections=<<<{:Rm=([_active_connections]*3)/2+10,[_memory]/512K}>>>
max_connections=<<{:RM=100,[_max_connections]}>>
##
_available_memory=<<<{:=[_memory]-[max_connections]*256K}>>>

# Query cache is used to cache SELECT results and later return them
# without actual executing the same query once again. Having the query
# cache enabled may result in significant speed improvements, if your
# have a lot of identical queries and rarely changing tables. See the
# "Qcache_lowmem_prunes" status variable to check if the current value
# is high enough for your load.
# Note: In case your tables change very often or if your queries are
# textually different every time, the query cache may result in a
# slowdown instead of a performance improvement.
query_cache_size=<<{DSS:=0}{:KM=[_available_memory]/10,8M}>>
##
_available_memory=<<<{:=[_available_memory]-[query_cache_size]}>>>
_buffers_memory=<<<{:=([_available_memory]*7)/10}>>>
_thread_buffers_memory=<<<{:=([_available_memory]*3)/10}>>>
_memory_per_thread=<<<{:=[_thread_buffers_memory]*[_over_commit_factor]/[max_connections]}>>>

# The number of open tables for all threads. Increasing this value
# increases the number of file descriptors that mysqld requires.
# Therefore you have to make sure to set the amount of open files
# allowed to at least 4096 in the variable "open-files-limit" in
# section [mysqld_safe]
table_cache=<<{:RM=256,[max_connections]*2}>>
##
_buffers_memory=<<<{:=[_buffers_memory]-[table_cache]*8K}>>>

# Maximum size for internal (in-memory) temporary tables. If a table
# grows larger than this value, it is automatically converted to disk
# based table This limitation is for a single table. There can be many
# of them.
_big_thread_buffers=<<<{:=[_memory_per_thread]*[_over_commit_factor2]}>>>
_tmp_table_size=<<<{:KM=16M,[_big_thread_buffers]}>>>
tmp_table_size=<<{:Km=[_tmp_table_size],[_memory]*10/100}>>


# How many threads we should keep in a cache for reuse. When a client
# disconnects, the client's threads are put in the cache if there aren't
# more than thread_cache_size threads from before.  This greatly reduces
# the amount of thread creations needed if you have a lot of new
# connections. (Normally this doesn't give a notable performance
# improvement if you have a good thread implementation.)
_thread_cache=<<<{:M=([max_connections]*5)/100,8}>>>
thread_cache_size=<<{:Rm=[_thread_cache],64}>>

#*** MyISAM Specific options
_myisam_buffers=<<<{:=[_buffers_memory]*([_myisam_pct]/100)}>>>
##

# The maximum size of the temporary file MySQL is allowed to use while
# recreating the index (during REPAIR, ALTER TABLE or LOAD DATA INFILE.
# If the file-size would be bigger than this, the index will be created
# through the key cache (which is slower).
myisam_max_sort_file_size=<<{DEDICATED|SHARED:K=100G}{:K=100G}>>

# If the temporary file used for fast index creation would be bigger
# than using the key cache by the amount specified here, then prefer the
# key cache method.  This is mainly used to force long character keys in
# large tables to use the slower key cache method to create the index.
_myisam_sort_buffer_size=<<<{:KM=8M,[_big_thread_buffers]}>>>
myisam_sort_buffer_size=<<{:Km=[_myisam_sort_buffer_size],[_memory]*20/100}>>

# Size of the Key Buffer, used to cache index blocks for MyISAM tables.
# Do not set it larger than 30% of your available memory, as some memory
# is also required by the OS to cache rows. Even if you're not using
# MyISAM tables, you should still set it to 8-64M as it will also be
# used for internal temporary disk tables.
key_buffer_size=<<{:KM=8M,[_myisam_buffers]/2}>>

# Size of the buffer used for doing full table scans of MyISAM tables.
# Allocated per thread, if a full scan is needed.
read_buffer_size=<<{:Km=64K,([_memory_per_thread]*2)/10,[_memory]/100}>>
read_rnd_buffer_size=<<{:Km=256K,([_memory_per_thread]*4)/10,[_memory]*4/100}>>

# This buffer is allocated when MySQL needs to rebuild the index in
# REPAIR, OPTIMZE, ALTER table statements as well as in LOAD DATA INFILE
# into an empty table. It is allocated per thread so be careful with
# large settings.
_sort_buffer_size=<<<{:Km=256K,([_memory_per_thread]*3)/10}>>>
sort_buffer_size=<<{:Km=[_sort_buffer_size],[_memory]*2/100}>>


#*** INNODB Specific options ***
<<{SETINNODBHOMEDIR:[innodb_home]}{:}>>
##
_innodb_buffers=<<<{:=[_buffers_memory]*(1-[_myisam_pct]/100)}>>>
##

# Use this option if you have a MySQL server with InnoDB support enabled
# but you do not plan to use it. This will save memory and disk space
# and speed up some things.
<<{MYISAM:skip-innodb}{:#skip-innodb}>>

# Additional memory pool that is used by InnoDB to store metadata
# information.  If InnoDB requires more memory for this purpose it will
# start to allocate it from the OS.  As this is fast enough on most
# recent operating systems, you normally do not need to change this
# value. SHOW INNODB STATUS will display the current amount used.
_innodb_additional_mem_pool_size=<<<{:M=2M,([_innodb_buffers]*2)/100}>>>
innodb_additional_mem_pool_size=<<{:Km=32M,[_innodb_additional_mem_pool_size]}>>
##
_innodb_buffers=<<<{:M=[_innodb_buffers]-[innodb_additional_mem_pool_size],0}>>>

# If set to 1, InnoDB will flush (fsync) the transaction logs to the
# disk at each commit, which offers full ACID behavior. If you are
# willing to compromise this safety, and you are running small
# transactions, you may set this to 0 or 2 to reduce disk I/O to the
# logs. Value 0 means that the log is only written to the log file and
# the log file flushed to disk approximately once per second. Value 2
# means the log is written to the log file at each commit, but the log
# file is only flushed to disk approximately once per second.
innodb_flush_log_at_trx_commit=1

# The size of the buffer InnoDB uses for buffering log data. As soon as
# it is full, InnoDB will have to flush it to disk. As it is flushed
# once per second anyway, it does not make sense to have it very large
# (even with long transactions).
_innodb_log_buffer_size=<<<{:M=1M,[_innodb_buffers]/100}>>>
innodb_log_buffer_size=<<{:Km=16M,[_innodb_log_buffer_size]}>>

# InnoDB, unlike MyISAM, uses a buffer pool to cache both indexes and
# row data. The bigger you set this the less disk I/O is needed to
# access data in tables. On a dedicated database server you may set this
# parameter up to 80% of the machine physical memory size. Do not set it
# too large, though, because competition of the physical memory may
# cause paging in the operating system.  Note that on 32bit systems you
# might be limited to 2-3.5G of user level memory per process, so do not
# set it too high.
innodb_buffer_pool_size=<<{:MK=[_innodb_buffers]-[innodb_log_buffer_size],8M}>>

# Size of each log file in a log group. You should set the combined size
# of log files to about 25%-100% of your buffer pool size to avoid
# unneeded buffer pool flush activity on log file overwrite. However,
# note that a larger logfile size will increase the time needed for the
# recovery process.
_innodb_log_file_size=<<<{OLTP:Rm=([innodb_buffer_pool_size]*2)/10,1G}{DSS:Rm=([innodb_buffer_pool_size]*5)/10,1G}{:Rm=([innodb_buffer_pool_size]*2)/10,1G}>>>
innodb_log_file_size=<<{CONFIG_ALTERED:[old_innodb_log_file_size]}{:KM=10M,[_innodb_log_file_size]}>>

# Number of threads allowed inside the InnoDB kernel. The optimal value
# depends highly on the application, hardware as well as the OS
# scheduler properties. A too high value may lead to thread thrashing.
## originally formula was innodb_thread_concurrency=<<{:M=8,2*([CPUS]+[DISKS])}>>
## but since only one disk will be used in a standard configuration
## [DISKS] is replaced by 1
innodb_thread_concurrency=<<{:M=8,2*([CPUS]+1)}>>
